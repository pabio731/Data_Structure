


큐(queue)는 대기줄을 생각하면 된다. 
먼저 들어온 데이터가 먼저 나가는 선입선출의 특성을 가지며
선형 데이터이다. 때로는 상황에 따라 우선 순위가 변경되기도 하는데,
그것은 힙에서 다룬다.	여기의 큐는 우선순위가 같다는 가정하에 구현한다.

큐를 현실세계에 빗대어 설명하자면 은행에서 업무 처리를 위하여 번호표를
받아 기다리는 사람들의 대기열이다.

가장 앞의 고객은 은행에 가장 먼저 도착한 고객이며, 가장 뒤의 고객은
가장 늦게 도착한 고객이다. 또한 한 명의 고객 앞에는 오직 한 명의 
고객만이 있기에 1:1의 선형관계이다. 가장 먼저 들어온 손님이 
가장 먼저 일처리를 하는 FIFO(First In First Out).

큐가 이런 특성을 갖는 것은 자료 반환은 제일 앞(front)에서만
가능하소 자료 추가는 제일 끝(rear)에서만 가능 하기 때문이다.
스택과 비교했을 때, 스택은 가장 위에서만 추가와 제거가 모두 가능

새로운 자료를 큐에 추가하는 것 -> Enqueue
큐에서 자료를 꺼내는 것	-> Dequeue
큐에서 자료를 꺼내지 않고 데이터만 확인	-> Peek

큐의 추상 자료형

이름
큐 생성		CreateQueue()	큐의 크기n	큐S		최대 n개의 원소를 가지는 큐 생성
큐 삭제		DeleteQueue()	큐S					
원소추가가능? IsFull()		큐S			F/T		배열 큐인 경우에만 의미 있음
공백 확인	IsEmpty()		큐S			F/T	
인큐			Enqueue()		큐S, 원소E	성공/실패
디큐			Dequeue()		큐S			원소E	원소 제거, 원소 반환
피크			Peek()			큐S			원소E	원소 제거X, 원소 반환

큐를 구현할 때, 배열을 이용할 수도 링크드 리스트를 이용할 수도 있다.
배열을 이용하면 구현의 복잡도가 낮지만 미리 🇹🇬고정된 큐의 크기로 불필요한
메모리 사용

링크드 리스트를 이용하면 구현은 조금 복잡지나 크기가 자유롭고 메모리의 낭비도X




덱(Deque),(디큐) -> 디큐는 노드를 빼는 함수와 명칭이 같아 여기서는 덱이라고 함.
덱은 두 개의 끝을 가지는 큐로, Double Ended Queue를 줄인 말이다.
덱은 양 끝에서 삽입과 반환 모두 가능한 자료구조로,
큐와 스택을 합친 자료구조로도 생각할 수 있다.
스택,큐와 비교했을 때 가장 큰 특징은 InsertFront기능을 가진다는 것.

덱의 추상 자료형

이름							 Input		OutPut		비고
덱 생성		CreateDeque()	덱의크기n	덱D
덱 삭제		DeleteDeque()	덱D			
원소추가가능?	 IsFull()		덱D			T/F	
공백확인		IsEmpty()		덱D			T/F
앞 추가		InsertFront()	덱D,원소E	성공.실패
뒤 추가		InsertRear()	덱D,원소E	성공,실패
앞 제거		DeleteFront()	덱D			원소E		노드 제거하고 반환
뒤 제거		DeleteRear()	덱D			원소E		노드 제거하고 반환
앞 반환		PeekFront()		덱D			원소E		제거하지 않고 반환만
뒤 반환		PeekRear()		덱D			원소E		제거하지 않고 반환만
덱표시		DisplayDeque()	덱D						덱에 저장된 원소 출력
